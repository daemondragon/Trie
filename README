# TextMining projet

## Introduction

This project have as goal a creation of a search structure that is first compiled
to an efficient form, then various search are perfomed in it.

Search must be efficient, as on a 3 million words structure, the search structure must support:
 * At least 3000 queries per second / core with distance = 0
 * At least 300 queries per second / core with distance = 1
 * At least 30 queries per second / core with distance = 2

Requirements are for a 2,7 GHz Intel Core i7 CPU.

Furthermore, the program must not use most than 512M of RAM.
This is why both wanted binary first limit the maximum RAM usage
so that tests can be done in real condition

This projet SUPPORT utf8 in contrary of the reference binary.
For instance, having a compiled file with:
`Τὴγλῶσσαμοῦἔδωσανἑλληνικὴ 65535`
and then searching the word into both binary will only output
the word in this binary. The reference will not find it.
(However the distance is in byte, not in visual character).

## Compilation

To compile this program, use `cargo build --release`
This will create the two wanted files in `target/release`
that will then need to be moved to the root of the project.

A Makefile is provided `make` to build the project in release mode and
move the wanted file to the root of the project directory.

The program need Rust and cargo installed (last version currently).
`rustc --version`: `rustc 1.36.0 (a53f9df32 2019-07-03)`
`cargo --version`: `cargo 1.36.0 (c4fcfb725 2019-05-15)`

## Questions

### Décrivez les choix de design de votre programme

Trois principales interfaces sont disponibles dans ce programme:

Compiler et Search, les deux interfaces pour le compiler et la structure de recherche.
Avoir des interfaces de cette manière permet d'implementer facilement la compilation et la recherche
pour différente structure. Cela à permet de comparer la version actuelle d'un trie basique, ainsi
que la réf réimplementée, sans avoir à tout adapter à chaque fois.

La dernière interface est IncrementalDistance que prend en paramètre Search.
Une distance incrémentale est une distance qui peut se calculer au fur et à mesure
en ajoutant des charactères les un à la suite des autres.
Avoir une interface pour la distance à permit d'implémenter facilement deux distances
différentes pour ce projet (toute de Damerau Levenshtein).
La première est une version "basique", fonctionnant dans tous les cas.
La deuxième est une distance implémentée directement avec des opérations bitwise,
bien plus rapide, mais ne fonctionnant que sur des recherches sur des mots d'une
longueur <= 64 bits (soit 100% des mots du fichier fourni).

La structure implémenter étant un ART, il y a 5 types de noeuds différents, chacun
pouvant stocker un nombre de fils différents. Toutefois, tous ont un header contentant
la frequence du mots (ou 0 si le noeuds courant ne représente pas un mot).
Le header contient aussi directement le chemin compresser (1 byte pour la longueur du chemin compressé,
7 pour le chemin en lui même). Cela permet ne pas avoir à stocker les chemin à un endroit différent des noeuds,
réduisant les déréferencements tout en simplifiant le code.
Cela veut dire que les chemins ne sont pas compressés optimalement, mais dans la plupart des cas, c'est largement suffisant.

La compilation se fait sur un dictionnaire trié, avec un seul chemin de l'ART en mémoire,
les noeuds restant étant écris sur le fichier dès qu'ils sont devenus inutiles pour la construction de l'arbre.

### Listez l’ensemble des tests effectués sur votre programme (en plus des units tests)

En plus des tests unitaires, deux autres tests sont faient:
`python3 differ.py`: Diff l'output du binaire avec la ref, sur différents fichiers avec différent fichiers de queries.
`python3 bencher.py`: Compare les performances du binaire créer avec la ref.
`cargo run --release --bin trie bench`: Lance les tests de performance pour ce binaire seulement
(pour voir rapidement les différences entre plusieurs version du code).

### Avez-vous détecté des cas où la correction par distance ne fonctionnait pas (même avec une distance élevée) ?

La correction par distance fonctionne très mal sur des petits mots (<= 3 lettres),
proposant souvant des mots aussi courts, mais n'ayant aucun rapport (e.g: "pe" (au lieu de "me") -> "et").

### Quelle est la structure de données que vous avez implémentée dans votre projet, pourquoi ?

La structure implémentée est un ART (Adaptive Radix Tree).
Plusieurs raisons pour cela:
- C'est une des implementation de comparaison de référence dans l'état de l'art actuellement
(d'autre strutures existent, mais sont plus compliquées).
- Elle implémente plusieurs choses vue en cours: la compression de chemin et la compression de noeuds.
- Elle est relativement simple à mettre en place, le papier de référence étant très clair.

### Proposez un réglage automatique de la distance pour un programme qui prend juste une chaîne de caractères en entrée, donner le processus d’évaluation ainsi que les résultats

DISTANCE = TAILLE / 5 + 1
=> 1..4: 1
=> 5..9: 2
=> 10..14: 3
...

Le processus d'évaluation est le score F1 (2 * (precision * recall) / (precision + recall))

### Comment comptez vous améliorer les performances de votre programme

Plusieurs solutions sont possibles:

- Detecter le benchmark (`isatty(stdin)`), dans ce cas, toutes les recherches sont présentes
d'un coup, il n'y a pas de besoin de faire toutes les recherches séquentiellement, on peut les batcher
et retrier à la sortie (http://dbgroup.cs.tsinghua.edu.cn/wangjn/papers/vldb2010-triejoin.pdf)
(c'est de la triche, et alors ?)

- Supprimer l'allocation de String pour utiliser un énorme buffer de bytes pour les stocker séquentiellement,
et réutiliser le buffer entre chaque requête.
(possible car les strings ne sont pas modifiées après insertion dans le vecteur de résultat).

- Trouver un moyen de faire l'early stopping sans utiliser la distance minimale dans une ligne.
Le calcul de la distance minimale sur une ligne est ce qui prend le plus de temps dans le programme actuellement.
Le calcul doit être fait pour l'instant car la ligne se calcule d'un coup, avec des opérations binaires.
Pour information, la distance prend 60% du temps d'exécution, et le calcul de la distance minimal environ 35% de ce temps.

- Changer de structure de données afin de limiter les accès disques (https://dbis-informatik.uibk.ac.at/sites/default/files/2018-06/hot-height-optimized.pdf)

### Que manque-t-il à votre correcteur orthographique pour qu’il soit à l’état de l’art ?

Un changement de la structure de données pour une version plus optimisée au niveau des disques:
(https://dbis-informatik.uibk.ac.at/sites/default/files/2018-06/hot-height-optimized.pdf)

Cette nouvelle structure permet de traiter tout un noeuds directement avec des opérations binaires
afin de rechercher plus efficacement les mots.
De plus, chaque noeud contient un patricia trie et permet de rééquilibrer l'arbre afin de limiter
sa hauteur, réduisant les accès disques.

## Performance

This part regroup most of the benchmarks done for each major commit
so that performance can be tracked and regression prevented.

New commit are to be inserted at the top of this to prevent useless scrolling
when creating new benchmark.

Benchmark are done on a 2.2 GHz Intel Core™ i5-5200U CPU.

### cad7c95

Testing trie "compiled/art_1000.bin"
Testing query file "./split/query_1000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 91 ms (+- 2 ms) => 10989 query/sec (+- 241 query)
distance: 2, time: 172 ms (+- 45 ms) => 5813 query/sec (+- 1520 query)
Testing query file "./split/query_1000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 111 ms (+- 15 ms) => 9009 query/sec (+- 1217 query)
distance: 2, time: 174 ms (+- 3 ms) => 5747 query/sec (+- 99 query)
Testing query file "./split/query_1000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 93 ms (+- 3 ms) => 10752 query/sec (+- 346 query)
distance: 2, time: 190 ms (+- 19 ms) => 5263 query/sec (+- 526 query)
Testing trie "compiled/art_10000.bin"
Testing query file "./split/query_10000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1432 ms (+- 125 ms) => 2094 query/sec (+- 182 query)
distance: 2, time: 3388 ms (+- 72 ms) => 885 query/sec (+- 18 query)
Testing query file "./split/query_10000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1333 ms (+- 20 ms) => 2250 query/sec (+- 33 query)
distance: 2, time: 3493 ms (+- 22 ms) => 858 query/sec (+- 5 query)
Testing query file "./split/query_10000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1352 ms (+- 105 ms) => 2218 query/sec (+- 172 query)
distance: 2, time: 3365 ms (+- 272 ms) => 891 query/sec (+- 72 query)
Testing trie "compiled/art_100000.bin"
Testing query file "./split/query_100000_75_25.txt"
distance: 0, time: 0 ms (+- 2 ms) => 3000000 query/sec (+- 6000000 query)
distance: 1, time: 4613 ms (+- 280 ms) => 650 query/sec (+- 39 query)
distance: 2, time: 20100 ms (+- 705 ms) => 149 query/sec (+- 5 query)
Testing query file "./split/query_100000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 4726 ms (+- 201 ms) => 634 query/sec (+- 26 query)
distance: 2, time: 20363 ms (+- 1617 ms) => 147 query/sec (+- 11 query)
Testing query file "./split/query_100000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 4305 ms (+- 54 ms) => 696 query/sec (+- 8 query)
distance: 2, time: 20657 ms (+- 1206 ms) => 145 query/sec (+- 8 query)

### b33c0e4

Testing trie "compiled/art_1000.bin"
Testing query file "./split/query_1000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 84 ms (+- 2 ms) => 11904 query/sec (+- 283 query)
distance: 2, time: 164 ms (+- 4 ms) => 6097 query/sec (+- 148 query)
Testing query file "./split/query_1000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 85 ms (+- 1 ms) => 11764 query/sec (+- 138 query)
distance: 2, time: 161 ms (+- 2 ms) => 6211 query/sec (+- 77 query)
Testing query file "./split/query_1000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 92 ms (+- 4 ms) => 10869 query/sec (+- 472 query)
distance: 2, time: 169 ms (+- 2 ms) => 5917 query/sec (+- 70 query)
Testing trie "compiled/art_10000.bin"
Testing query file "./split/query_10000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1243 ms (+- 70 ms) => 2413 query/sec (+- 135 query)
distance: 2, time: 3024 ms (+- 13 ms) => 992 query/sec (+- 4 query)
Testing query file "./split/query_10000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1541 ms (+- 274 ms) => 1946 query/sec (+- 346 query)
distance: 2, time: 3556 ms (+- 1466 ms) => 843 query/sec (+- 347 query)
Testing query file "./split/query_10000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 1466 ms (+- 423 ms) => 2046 query/sec (+- 590 query)
distance: 2, time: 3585 ms (+- 327 ms) => 836 query/sec (+- 76 query)
Testing trie "compiled/art_100000.bin"
Testing query file "./split/query_100000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 4750 ms (+- 332 ms) => 631 query/sec (+- 44 query)
distance: 2, time: 18669 ms (+- 387 ms) => 160 query/sec (+- 3 query)
Testing query file "./split/query_100000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 4488 ms (+- 89 ms) => 668 query/sec (+- 13 query)
distance: 2, time: 18733 ms (+- 802 ms) => 160 query/sec (+- 6 query)
Testing query file "./split/query_100000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 4800 ms (+- 119 ms) => 625 query/sec (+- 15 query)
distance: 2, time: 19850 ms (+- 460 ms) => 151 query/sec (+- 3 query)

### 073e08a

Testing trie "compiled/art_1000.bin"
Testing query file "./split/query_1000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 27 ms (+- 5 ms) => 37037 query/sec (+- 6858 query)
distance: 2, time: 79 ms (+- 2 ms) => 12658 query/sec (+- 320 query)
Testing query file "./split/query_1000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 29 ms (+- 7 ms) => 34482 query/sec (+- 8323 query)
distance: 2, time: 79 ms (+- 1 ms) => 12658 query/sec (+- 160 query)
Testing query file "./split/query_1000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 27 ms (+- 1 ms) => 37037 query/sec (+- 1371 query)
distance: 2, time: 78 ms (+- 2 ms) => 12820 query/sec (+- 328 query)
Testing trie "compiled/art_10000.bin"
Testing query file "./split/query_10000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 270 ms (+- 3 ms) => 11111 query/sec (+- 123 query)
distance: 2, time: 1225 ms (+- 2 ms) => 2448 query/sec (+- 3 query)
Testing query file "./split/query_10000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 275 ms (+- 6 ms) => 10909 query/sec (+- 238 query)
distance: 2, time: 1348 ms (+- 125 ms) => 2225 query/sec (+- 206 query)
Testing query file "./split/query_10000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 281 ms (+- 27 ms) => 10676 query/sec (+- 1025 query)
distance: 2, time: 1258 ms (+- 36 ms) => 2384 query/sec (+- 68 query)
Testing trie "compiled/art_100000.bin"
Testing query file "./split/query_100000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 658 ms (+- 41 ms) => 4559 query/sec (+- 284 query)
distance: 2, time: 5656 ms (+- 1089 ms) => 530 query/sec (+- 102 query)
Testing query file "./split/query_100000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 603 ms (+- 4 ms) => 4975 query/sec (+- 33 query)
distance: 2, time: 6206 ms (+- 387 ms) => 483 query/sec (+- 30 query)
Testing query file "./split/query_100000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 691 ms (+- 4 ms) => 4341 query/sec (+- 25 query)
distance: 2, time: 6460 ms (+- 184 ms) => 464 query/sec (+- 13 query)

### 3584e6a

Testing trie "compiled/art_1000.bin"
Testing query file "./split/query_1000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 23 ms (+- 0 ms) => 43478 query/sec (+- 0 query)
distance: 2, time: 66 ms (+- 2 ms) => 15151 query/sec (+- 459 query)
Testing query file "./split/query_1000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 24 ms (+- 1 ms) => 41666 query/sec (+- 1736 query)
distance: 2, time: 70 ms (+- 4 ms) => 14285 query/sec (+- 816 query)
Testing query file "./split/query_1000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 23 ms (+- 1 ms) => 43478 query/sec (+- 1890 query)
distance: 2, time: 67 ms (+- 1 ms) => 14925 query/sec (+- 222 query)
Testing trie "compiled/art_10000.bin"
Testing query file "./split/query_10000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 229 ms (+- 3 ms) => 13100 query/sec (+- 171 query)
distance: 2, time: 1071 ms (+- 90 ms) => 2801 query/sec (+- 235 query)
Testing query file "./split/query_10000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 236 ms (+- 3 ms) => 12711 query/sec (+- 161 query)
distance: 2, time: 1075 ms (+- 99 ms) => 2790 query/sec (+- 256 query)
Testing query file "./split/query_10000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 243 ms (+- 14 ms) => 12345 query/sec (+- 711 query)
distance: 2, time: 1395 ms (+- 402 ms) => 2150 query/sec (+- 619 query)
Testing trie "compiled/art_100000.bin"
Testing query file "./split/query_100000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 834 ms (+- 300 ms) => 3597 query/sec (+- 1293 query)
distance: 2, time: 4879 ms (+- 204 ms) => 614 query/sec (+- 25 query)
Testing query file "./split/query_100000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 521 ms (+- 22 ms) => 5758 query/sec (+- 243 query)
distance: 2, time: 5075 ms (+- 347 ms) => 591 query/sec (+- 40 query)
Testing query file "./split/query_100000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 574 ms (+- 30 ms) => 5226 query/sec (+- 273 query)
distance: 2, time: 4761 ms (+- 82 ms) => 630 query/sec (+- 10 query)

### 394f470

Testing trie "compiled/art_1000.bin"
Testing query file "./split/query_1000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 25 ms (+- 1 ms) => 40000 query/sec (+- 1600 query)
distance: 2, time: 71 ms (+- 1 ms) => 14084 query/sec (+- 198 query)
Testing query file "./split/query_1000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 24 ms (+- 0 ms) => 41666 query/sec (+- 0 query)
distance: 2, time: 71 ms (+- 1 ms) => 14084 query/sec (+- 198 query)
Testing query file "./split/query_1000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 1000000 query/sec (+- 0 query)
distance: 1, time: 25 ms (+- 1 ms) => 40000 query/sec (+- 1600 query)
distance: 2, time: 91 ms (+- 12 ms) => 10989 query/sec (+- 1449 query)
Testing trie "compiled/art_10000.bin"
Testing query file "./split/query_10000_75_25.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 281 ms (+- 32 ms) => 10676 query/sec (+- 1215 query)
distance: 2, time: 1205 ms (+- 67 ms) => 2489 query/sec (+- 138 query)
Testing query file "./split/query_10000_50_50.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 245 ms (+- 11 ms) => 12244 query/sec (+- 549 query)
distance: 2, time: 1186 ms (+- 32 ms) => 2529 query/sec (+- 68 query)
Testing query file "./split/query_10000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 246 ms (+- 4 ms) => 12195 query/sec (+- 198 query)
distance: 2, time: 1212 ms (+- 62 ms) => 2475 query/sec (+- 126 query)
Testing trie "compiled/art_100000.bin"
Testing query file "./split/query_100000_75_25.txt"
distance: 0, time: 1 ms (+- 1 ms) => 3000000 query/sec (+- 3000000 query)
distance: 1, time: 760 ms (+- 117 ms) => 3947 query/sec (+- 607 query)
distance: 2, time: 5527 ms (+- 476 ms) => 542 query/sec (+- 46 query)
Testing query file "./split/query_100000_50_50.txt"
distance: 0, time: 1 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 528 ms (+- 3 ms) => 5681 query/sec (+- 32 query)
distance: 2, time: 4632 ms (+- 100 ms) => 647 query/sec (+- 13 query)
Testing query file "./split/query_100000_25_75.txt"
distance: 0, time: 0 ms (+- 0 ms) => 3000000 query/sec (+- 0 query)
distance: 1, time: 530 ms (+- 49 ms) => 5660 query/sec (+- 523 query)
distance: 2, time: 4956 ms (+- 591 ms) => 605 query/sec (+- 72 query)
